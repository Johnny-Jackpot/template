//usage @include prop-val((color: red, width: 100px));
@mixin prop-val($map) {
	$type: type-of($map);
	@if $type != 'map' {
		@error "Param must be a map. Was #{$map} => #{$type}";
	}

	$keys: map-keys($map);
	$values: map-values($map);

	@for $i from 1 through length($map) {
		#{nth($keys, $i)}: #{nth($values, $i)};
	}
}

/*
	take selector , f.e. ".someClass" and generate styles for
	selectors: ".someClass-n1", ".someClass-n2" .... and so on
*/
@mixin prop-val-loop($selector, $list) {
	$type: type-of($list);
	@if $type != 'list' {
		@error "Param must be a list. Was #{$list} => #{$type}";
	}

	@for $i from 1 through length($list) {
        $item: nth($list, $i);
        $suffix: '-n#{$i}';
		$target: selector-append($selector, $suffix);
        
        #{$target} {
            @include prop-val($item);
        }
    }
}

/* this is specific mixin only for ".feature" */
@mixin setFeaturesMargins($margins) {
	$type: type-of($margins);
	@if $type != 'list' {
		@error "Param must be a list. Was #{$margins} => #{$type}";
	}

	@for $i from 1 through length($margins) {
        $map: nth($margins, $i);
        $feature: map-get($map, 'feature');
        $sprite: map-get($map, 'sprite');
        $heading: map-get($map, 'heading');

        &:nth-of-type(#{$i}) {
            @include prop-val((margin: $feature));

            .sprite {
                @include prop-val((margin: $sprite));
            }

            .feature-heading {
                @include prop-val((margin: $heading));
            }
        }
    }
}